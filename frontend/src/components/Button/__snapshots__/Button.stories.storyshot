// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Button disabled 1`] = `
<ReactDecorator
  onMount={[Function]}
  onUnMount={[Function]}
  story={
    <Story
      PropTable={[Function]}
      components={
        Object {
          "a": [Function],
          "code": [Function],
          "h1": [Function],
          "h2": [Function],
          "h3": [Function],
          "h4": [Function],
          "h5": [Function],
          "h6": [Function],
          "li": [Function],
          "p": [Function],
          "ul": [Function],
        }
      }
      context={
        Object {
          "hooks": HooksContext {
            "currentContext": [Circular],
            "currentDecoratorName": null,
            "currentEffects": Array [
              Object {
                "create": [Function],
              },
            ],
            "currentHooks": Array [],
            "currentPhase": "NONE",
            "hasUpdates": false,
            "hookListsMap": WeakMap {},
            "mountedDecorators": Set {
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            },
            "nextHookIndex": 0,
            "prevEffects": Array [],
            "prevMountedDecorators": Set {},
            "renderListener": [Function],
          },
          "id": "button--disabled",
          "kind": "Button",
          "name": "disabled",
          "parameters": Object {
            "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
            "framework": "react",
            "options": Object {
              "hierarchyRootSeparator": "|",
              "hierarchySeparator": /\\\\/\\|\\\\\\./,
            },
          },
          "story": "disabled",
        }
      }
      excludedPropTypes={Array []}
      info=""
      maxPropArrayLength={3}
      maxPropObjectKeys={3}
      maxPropStringLength={50}
      maxPropsIntoLine={3}
      propTableCompare={[Function]}
      propTables={Array []}
      propTablesExclude={Array []}
      showHeader={true}
      showInline={false}
      showSource={true}
      styles={[Function]}
    >
      <ForwardRef
        disabled={true}
      />
    </Story>
  }
>
  <Story
    PropTable={[Function]}
    components={
      Object {
        "a": [Function],
        "code": [Function],
        "h1": [Function],
        "h2": [Function],
        "h3": [Function],
        "h4": [Function],
        "h5": [Function],
        "h6": [Function],
        "li": [Function],
        "p": [Function],
        "ul": [Function],
      }
    }
    context={
      Object {
        "hooks": HooksContext {
          "currentContext": [Circular],
          "currentDecoratorName": null,
          "currentEffects": Array [
            Object {
              "create": [Function],
            },
          ],
          "currentHooks": Array [],
          "currentPhase": "NONE",
          "hasUpdates": false,
          "hookListsMap": WeakMap {},
          "mountedDecorators": Set {
            [Function],
            [Function],
            [Function],
            [Function],
            [Function],
          },
          "nextHookIndex": 0,
          "prevEffects": Array [],
          "prevMountedDecorators": Set {},
          "renderListener": [Function],
        },
        "id": "button--disabled",
        "kind": "Button",
        "name": "disabled",
        "parameters": Object {
          "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
          "framework": "react",
          "options": Object {
            "hierarchyRootSeparator": "|",
            "hierarchySeparator": /\\\\/\\|\\\\\\./,
          },
        },
        "story": "disabled",
      }
    }
    excludedPropTypes={Array []}
    info=""
    maxPropArrayLength={3}
    maxPropObjectKeys={3}
    maxPropStringLength={50}
    maxPropsIntoLine={3}
    propTableCompare={[Function]}
    propTables={Array []}
    propTablesExclude={Array []}
    showHeader={true}
    showInline={false}
    showSource={true}
    styles={[Function]}
  >
    <div
      style={
        Object {
          "position": "relative",
          "zIndex": 0,
        }
      }
    >
      <Button
        disabled={true}
      >
        <StyledComponent
          disabled={true}
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Button-sc-1age22d-0",
                "isStatic": false,
                "lastClassName": "hKZwO",
                "rules": Array [
                  "padding:",
                  "16px",
                  " ",
                  "32px",
                  ";font-family:",
                  "Muli",
                  ";font-weight:",
                  "700",
                  ";font-size:",
                  "16px",
                  ";cursor:",
                  [Function],
                  ";",
                  [Function],
                  " border:none;border-radius:",
                  "4px",
                  ";text-decoration:none;color:",
                  "#222222",
                  ";background-color:",
                  [Function],
                  ";transition:background-color 0.3s ease-in-out;",
                ],
              },
              "displayName": "Button",
              "render": [Function],
              "styledComponentId": "Button-sc-1age22d-0",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <button
            className="Button-sc-1age22d-0 hKZwO"
            disabled={true}
          />
        </StyledComponent>
      </Button>
    </div>
    <button
      className="info__show-button"
      onClick={[Function]}
      style={
        Object {
          "background": "#027ac5",
          "border": "none",
          "borderRadius": "0 0 0 5px",
          "color": "#fff",
          "cursor": "pointer",
          "display": "block",
          "fontFamily": "sans-serif",
          "fontSize": 12,
          "padding": "5px 15px",
          "position": "fixed",
          "right": 0,
          "top": 0,
        }
      }
      type="button"
    >
      Show Info
    </button>
  </Story>
</ReactDecorator>
`;

exports[`Storyshots Button label 1`] = `
<ReactDecorator
  onMount={[Function]}
  onUnMount={[Function]}
  story={
    <Story
      PropTable={[Function]}
      components={
        Object {
          "a": [Function],
          "code": [Function],
          "h1": [Function],
          "h2": [Function],
          "h3": [Function],
          "h4": [Function],
          "h5": [Function],
          "h6": [Function],
          "li": [Function],
          "p": [Function],
          "ul": [Function],
        }
      }
      context={
        Object {
          "hooks": HooksContext {
            "currentContext": [Circular],
            "currentDecoratorName": null,
            "currentEffects": Array [
              Object {
                "create": [Function],
              },
            ],
            "currentHooks": Array [],
            "currentPhase": "NONE",
            "hasUpdates": false,
            "hookListsMap": WeakMap {},
            "mountedDecorators": Set {
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            },
            "nextHookIndex": 0,
            "prevEffects": Array [],
            "prevMountedDecorators": Set {},
            "renderListener": [Function],
          },
          "id": "button--label",
          "kind": "Button",
          "name": "label",
          "parameters": Object {
            "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
            "framework": "react",
            "options": Object {
              "hierarchyRootSeparator": "|",
              "hierarchySeparator": /\\\\/\\|\\\\\\./,
            },
          },
          "story": "label",
        }
      }
      excludedPropTypes={Array []}
      info=""
      maxPropArrayLength={3}
      maxPropObjectKeys={3}
      maxPropStringLength={50}
      maxPropsIntoLine={3}
      propTableCompare={[Function]}
      propTables={Array []}
      propTablesExclude={Array []}
      showHeader={true}
      showInline={false}
      showSource={true}
      styles={[Function]}
    >
      <ForwardRef>
        Coucou
      </ForwardRef>
    </Story>
  }
>
  <Story
    PropTable={[Function]}
    components={
      Object {
        "a": [Function],
        "code": [Function],
        "h1": [Function],
        "h2": [Function],
        "h3": [Function],
        "h4": [Function],
        "h5": [Function],
        "h6": [Function],
        "li": [Function],
        "p": [Function],
        "ul": [Function],
      }
    }
    context={
      Object {
        "hooks": HooksContext {
          "currentContext": [Circular],
          "currentDecoratorName": null,
          "currentEffects": Array [
            Object {
              "create": [Function],
            },
          ],
          "currentHooks": Array [],
          "currentPhase": "NONE",
          "hasUpdates": false,
          "hookListsMap": WeakMap {},
          "mountedDecorators": Set {
            [Function],
            [Function],
            [Function],
            [Function],
            [Function],
          },
          "nextHookIndex": 0,
          "prevEffects": Array [],
          "prevMountedDecorators": Set {},
          "renderListener": [Function],
        },
        "id": "button--label",
        "kind": "Button",
        "name": "label",
        "parameters": Object {
          "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
          "framework": "react",
          "options": Object {
            "hierarchyRootSeparator": "|",
            "hierarchySeparator": /\\\\/\\|\\\\\\./,
          },
        },
        "story": "label",
      }
    }
    excludedPropTypes={Array []}
    info=""
    maxPropArrayLength={3}
    maxPropObjectKeys={3}
    maxPropStringLength={50}
    maxPropsIntoLine={3}
    propTableCompare={[Function]}
    propTables={Array []}
    propTablesExclude={Array []}
    showHeader={true}
    showInline={false}
    showSource={true}
    styles={[Function]}
  >
    <div
      style={
        Object {
          "position": "relative",
          "zIndex": 0,
        }
      }
    >
      <Button>
        <StyledComponent
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Button-sc-1age22d-0",
                "isStatic": false,
                "lastClassName": "dyxcmx",
                "rules": Array [
                  "padding:",
                  "16px",
                  " ",
                  "32px",
                  ";font-family:",
                  "Muli",
                  ";font-weight:",
                  "700",
                  ";font-size:",
                  "16px",
                  ";cursor:",
                  [Function],
                  ";",
                  [Function],
                  " border:none;border-radius:",
                  "4px",
                  ";text-decoration:none;color:",
                  "#222222",
                  ";background-color:",
                  [Function],
                  ";transition:background-color 0.3s ease-in-out;",
                ],
              },
              "displayName": "Button",
              "render": [Function],
              "styledComponentId": "Button-sc-1age22d-0",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <button
            className="Button-sc-1age22d-0 dyxcmx"
          >
            Coucou
          </button>
        </StyledComponent>
      </Button>
    </div>
    <button
      className="info__show-button"
      onClick={[Function]}
      style={
        Object {
          "background": "#027ac5",
          "border": "none",
          "borderRadius": "0 0 0 5px",
          "color": "#fff",
          "cursor": "pointer",
          "display": "block",
          "fontFamily": "sans-serif",
          "fontSize": 12,
          "padding": "5px 15px",
          "position": "fixed",
          "right": 0,
          "top": 0,
        }
      }
      type="button"
    >
      Show Info
    </button>
  </Story>
</ReactDecorator>
`;

exports[`Storyshots Button onClick 1`] = `
<ReactDecorator
  onMount={[Function]}
  onUnMount={[Function]}
  story={
    <Story
      PropTable={[Function]}
      components={
        Object {
          "a": [Function],
          "code": [Function],
          "h1": [Function],
          "h2": [Function],
          "h3": [Function],
          "h4": [Function],
          "h5": [Function],
          "h6": [Function],
          "li": [Function],
          "p": [Function],
          "ul": [Function],
        }
      }
      context={
        Object {
          "hooks": HooksContext {
            "currentContext": [Circular],
            "currentDecoratorName": null,
            "currentEffects": Array [
              Object {
                "create": [Function],
              },
            ],
            "currentHooks": Array [],
            "currentPhase": "NONE",
            "hasUpdates": false,
            "hookListsMap": WeakMap {},
            "mountedDecorators": Set {
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            },
            "nextHookIndex": 0,
            "prevEffects": Array [],
            "prevMountedDecorators": Set {},
            "renderListener": [Function],
          },
          "id": "button--onclick",
          "kind": "Button",
          "name": "onClick",
          "parameters": Object {
            "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
            "framework": "react",
            "options": Object {
              "hierarchyRootSeparator": "|",
              "hierarchySeparator": /\\\\/\\|\\\\\\./,
            },
          },
          "story": "onClick",
        }
      }
      excludedPropTypes={Array []}
      info=""
      maxPropArrayLength={3}
      maxPropObjectKeys={3}
      maxPropStringLength={50}
      maxPropsIntoLine={3}
      propTableCompare={[Function]}
      propTables={Array []}
      propTablesExclude={Array []}
      showHeader={true}
      showInline={false}
      showSource={true}
      styles={[Function]}
    >
      <ForwardRef
        onClick={[Function]}
      />
    </Story>
  }
>
  <Story
    PropTable={[Function]}
    components={
      Object {
        "a": [Function],
        "code": [Function],
        "h1": [Function],
        "h2": [Function],
        "h3": [Function],
        "h4": [Function],
        "h5": [Function],
        "h6": [Function],
        "li": [Function],
        "p": [Function],
        "ul": [Function],
      }
    }
    context={
      Object {
        "hooks": HooksContext {
          "currentContext": [Circular],
          "currentDecoratorName": null,
          "currentEffects": Array [
            Object {
              "create": [Function],
            },
          ],
          "currentHooks": Array [],
          "currentPhase": "NONE",
          "hasUpdates": false,
          "hookListsMap": WeakMap {},
          "mountedDecorators": Set {
            [Function],
            [Function],
            [Function],
            [Function],
            [Function],
          },
          "nextHookIndex": 0,
          "prevEffects": Array [],
          "prevMountedDecorators": Set {},
          "renderListener": [Function],
        },
        "id": "button--onclick",
        "kind": "Button",
        "name": "onClick",
        "parameters": Object {
          "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
          "framework": "react",
          "options": Object {
            "hierarchyRootSeparator": "|",
            "hierarchySeparator": /\\\\/\\|\\\\\\./,
          },
        },
        "story": "onClick",
      }
    }
    excludedPropTypes={Array []}
    info=""
    maxPropArrayLength={3}
    maxPropObjectKeys={3}
    maxPropStringLength={50}
    maxPropsIntoLine={3}
    propTableCompare={[Function]}
    propTables={Array []}
    propTablesExclude={Array []}
    showHeader={true}
    showInline={false}
    showSource={true}
    styles={[Function]}
  >
    <div
      style={
        Object {
          "position": "relative",
          "zIndex": 0,
        }
      }
    >
      <Button
        onClick={[Function]}
      >
        <StyledComponent
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Button-sc-1age22d-0",
                "isStatic": false,
                "lastClassName": "dyxcmx",
                "rules": Array [
                  "padding:",
                  "16px",
                  " ",
                  "32px",
                  ";font-family:",
                  "Muli",
                  ";font-weight:",
                  "700",
                  ";font-size:",
                  "16px",
                  ";cursor:",
                  [Function],
                  ";",
                  [Function],
                  " border:none;border-radius:",
                  "4px",
                  ";text-decoration:none;color:",
                  "#222222",
                  ";background-color:",
                  [Function],
                  ";transition:background-color 0.3s ease-in-out;",
                ],
              },
              "displayName": "Button",
              "render": [Function],
              "styledComponentId": "Button-sc-1age22d-0",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[Function]}
        >
          <button
            className="Button-sc-1age22d-0 dyxcmx"
            onClick={[Function]}
          />
        </StyledComponent>
      </Button>
    </div>
    <button
      className="info__show-button"
      onClick={[Function]}
      style={
        Object {
          "background": "#027ac5",
          "border": "none",
          "borderRadius": "0 0 0 5px",
          "color": "#fff",
          "cursor": "pointer",
          "display": "block",
          "fontFamily": "sans-serif",
          "fontSize": 12,
          "padding": "5px 15px",
          "position": "fixed",
          "right": 0,
          "top": 0,
        }
      }
      type="button"
    >
      Show Info
    </button>
  </Story>
</ReactDecorator>
`;

exports[`Storyshots Button playground 1`] = `
<ReactDecorator
  onMount={[Function]}
  onUnMount={[Function]}
  story={
    <Story
      PropTable={[Function]}
      components={
        Object {
          "a": [Function],
          "code": [Function],
          "h1": [Function],
          "h2": [Function],
          "h3": [Function],
          "h4": [Function],
          "h5": [Function],
          "h6": [Function],
          "li": [Function],
          "p": [Function],
          "ul": [Function],
        }
      }
      context={
        Object {
          "hooks": HooksContext {
            "currentContext": [Circular],
            "currentDecoratorName": null,
            "currentEffects": Array [
              Object {
                "create": [Function],
              },
            ],
            "currentHooks": Array [],
            "currentPhase": "NONE",
            "hasUpdates": false,
            "hookListsMap": WeakMap {},
            "mountedDecorators": Set {
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            },
            "nextHookIndex": 0,
            "prevEffects": Array [],
            "prevMountedDecorators": Set {},
            "renderListener": [Function],
          },
          "id": "button--playground",
          "kind": "Button",
          "name": "playground",
          "parameters": Object {
            "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
            "framework": "react",
            "options": Object {
              "hierarchyRootSeparator": "|",
              "hierarchySeparator": /\\\\/\\|\\\\\\./,
            },
          },
          "story": "playground",
        }
      }
      excludedPropTypes={Array []}
      info=""
      maxPropArrayLength={3}
      maxPropObjectKeys={3}
      maxPropStringLength={50}
      maxPropsIntoLine={3}
      propTableCompare={[Function]}
      propTables={Array []}
      propTablesExclude={Array []}
      showHeader={true}
      showInline={false}
      showSource={true}
      styles={[Function]}
    >
      <ForwardRef
        disabled={true}
        onClick={[Function]}
      >
        Hello Storybook
      </ForwardRef>
    </Story>
  }
>
  <Story
    PropTable={[Function]}
    components={
      Object {
        "a": [Function],
        "code": [Function],
        "h1": [Function],
        "h2": [Function],
        "h3": [Function],
        "h4": [Function],
        "h5": [Function],
        "h6": [Function],
        "li": [Function],
        "p": [Function],
        "ul": [Function],
      }
    }
    context={
      Object {
        "hooks": HooksContext {
          "currentContext": [Circular],
          "currentDecoratorName": null,
          "currentEffects": Array [
            Object {
              "create": [Function],
            },
          ],
          "currentHooks": Array [],
          "currentPhase": "NONE",
          "hasUpdates": false,
          "hookListsMap": WeakMap {},
          "mountedDecorators": Set {
            [Function],
            [Function],
            [Function],
            [Function],
            [Function],
          },
          "nextHookIndex": 0,
          "prevEffects": Array [],
          "prevMountedDecorators": Set {},
          "renderListener": [Function],
        },
        "id": "button--playground",
        "kind": "Button",
        "name": "playground",
        "parameters": Object {
          "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
          "framework": "react",
          "options": Object {
            "hierarchyRootSeparator": "|",
            "hierarchySeparator": /\\\\/\\|\\\\\\./,
          },
        },
        "story": "playground",
      }
    }
    excludedPropTypes={Array []}
    info=""
    maxPropArrayLength={3}
    maxPropObjectKeys={3}
    maxPropStringLength={50}
    maxPropsIntoLine={3}
    propTableCompare={[Function]}
    propTables={Array []}
    propTablesExclude={Array []}
    showHeader={true}
    showInline={false}
    showSource={true}
    styles={[Function]}
  >
    <div
      style={
        Object {
          "position": "relative",
          "zIndex": 0,
        }
      }
    >
      <Button
        disabled={true}
        onClick={[Function]}
      >
        <StyledComponent
          disabled={true}
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Button-sc-1age22d-0",
                "isStatic": false,
                "lastClassName": "hKZwO",
                "rules": Array [
                  "padding:",
                  "16px",
                  " ",
                  "32px",
                  ";font-family:",
                  "Muli",
                  ";font-weight:",
                  "700",
                  ";font-size:",
                  "16px",
                  ";cursor:",
                  [Function],
                  ";",
                  [Function],
                  " border:none;border-radius:",
                  "4px",
                  ";text-decoration:none;color:",
                  "#222222",
                  ";background-color:",
                  [Function],
                  ";transition:background-color 0.3s ease-in-out;",
                ],
              },
              "displayName": "Button",
              "render": [Function],
              "styledComponentId": "Button-sc-1age22d-0",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[Function]}
        >
          <button
            className="Button-sc-1age22d-0 hKZwO"
            disabled={true}
            onClick={[Function]}
          >
            Hello Storybook
          </button>
        </StyledComponent>
      </Button>
    </div>
    <button
      className="info__show-button"
      onClick={[Function]}
      style={
        Object {
          "background": "#027ac5",
          "border": "none",
          "borderRadius": "0 0 0 5px",
          "color": "#fff",
          "cursor": "pointer",
          "display": "block",
          "fontFamily": "sans-serif",
          "fontSize": 12,
          "padding": "5px 15px",
          "position": "fixed",
          "right": 0,
          "top": 0,
        }
      }
      type="button"
    >
      Show Info
    </button>
  </Story>
</ReactDecorator>
`;

exports[`Storyshots Button with no props 1`] = `
<ReactDecorator
  onMount={[Function]}
  onUnMount={[Function]}
  story={
    <Story
      PropTable={[Function]}
      components={
        Object {
          "a": [Function],
          "code": [Function],
          "h1": [Function],
          "h2": [Function],
          "h3": [Function],
          "h4": [Function],
          "h5": [Function],
          "h6": [Function],
          "li": [Function],
          "p": [Function],
          "ul": [Function],
        }
      }
      context={
        Object {
          "hooks": HooksContext {
            "currentContext": [Circular],
            "currentDecoratorName": null,
            "currentEffects": Array [
              Object {
                "create": [Function],
              },
            ],
            "currentHooks": Array [],
            "currentPhase": "NONE",
            "hasUpdates": false,
            "hookListsMap": WeakMap {},
            "mountedDecorators": Set {
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            },
            "nextHookIndex": 0,
            "prevEffects": Array [],
            "prevMountedDecorators": Set {},
            "renderListener": [Function],
          },
          "id": "button--with-no-props",
          "kind": "Button",
          "name": "with no props",
          "parameters": Object {
            "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
            "framework": "react",
            "options": Object {
              "hierarchyRootSeparator": "|",
              "hierarchySeparator": /\\\\/\\|\\\\\\./,
            },
          },
          "story": "with no props",
        }
      }
      excludedPropTypes={Array []}
      info=""
      maxPropArrayLength={3}
      maxPropObjectKeys={3}
      maxPropStringLength={50}
      maxPropsIntoLine={3}
      propTableCompare={[Function]}
      propTables={Array []}
      propTablesExclude={Array []}
      showHeader={true}
      showInline={false}
      showSource={true}
      styles={[Function]}
    >
      <ForwardRef />
    </Story>
  }
>
  <Story
    PropTable={[Function]}
    components={
      Object {
        "a": [Function],
        "code": [Function],
        "h1": [Function],
        "h2": [Function],
        "h3": [Function],
        "h4": [Function],
        "h5": [Function],
        "h6": [Function],
        "li": [Function],
        "p": [Function],
        "ul": [Function],
      }
    }
    context={
      Object {
        "hooks": HooksContext {
          "currentContext": [Circular],
          "currentDecoratorName": null,
          "currentEffects": Array [
            Object {
              "create": [Function],
            },
          ],
          "currentHooks": Array [],
          "currentPhase": "NONE",
          "hasUpdates": false,
          "hookListsMap": WeakMap {},
          "mountedDecorators": Set {
            [Function],
            [Function],
            [Function],
            [Function],
            [Function],
          },
          "nextHookIndex": 0,
          "prevEffects": Array [],
          "prevMountedDecorators": Set {},
          "renderListener": [Function],
        },
        "id": "button--with-no-props",
        "kind": "Button",
        "name": "with no props",
        "parameters": Object {
          "fileName": "/Users/amauryw/dev/commentor/frontend/src/components/Button/Button.stories.tsx",
          "framework": "react",
          "options": Object {
            "hierarchyRootSeparator": "|",
            "hierarchySeparator": /\\\\/\\|\\\\\\./,
          },
        },
        "story": "with no props",
      }
    }
    excludedPropTypes={Array []}
    info=""
    maxPropArrayLength={3}
    maxPropObjectKeys={3}
    maxPropStringLength={50}
    maxPropsIntoLine={3}
    propTableCompare={[Function]}
    propTables={Array []}
    propTablesExclude={Array []}
    showHeader={true}
    showInline={false}
    showSource={true}
    styles={[Function]}
  >
    <div
      style={
        Object {
          "position": "relative",
          "zIndex": 0,
        }
      }
    >
      <Button>
        <StyledComponent
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Button-sc-1age22d-0",
                "isStatic": false,
                "lastClassName": "dyxcmx",
                "rules": Array [
                  "padding:",
                  "16px",
                  " ",
                  "32px",
                  ";font-family:",
                  "Muli",
                  ";font-weight:",
                  "700",
                  ";font-size:",
                  "16px",
                  ";cursor:",
                  [Function],
                  ";",
                  [Function],
                  " border:none;border-radius:",
                  "4px",
                  ";text-decoration:none;color:",
                  "#222222",
                  ";background-color:",
                  [Function],
                  ";transition:background-color 0.3s ease-in-out;",
                ],
              },
              "displayName": "Button",
              "render": [Function],
              "styledComponentId": "Button-sc-1age22d-0",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <button
            className="Button-sc-1age22d-0 dyxcmx"
          />
        </StyledComponent>
      </Button>
    </div>
    <button
      className="info__show-button"
      onClick={[Function]}
      style={
        Object {
          "background": "#027ac5",
          "border": "none",
          "borderRadius": "0 0 0 5px",
          "color": "#fff",
          "cursor": "pointer",
          "display": "block",
          "fontFamily": "sans-serif",
          "fontSize": 12,
          "padding": "5px 15px",
          "position": "fixed",
          "right": 0,
          "top": 0,
        }
      }
      type="button"
    >
      Show Info
    </button>
  </Story>
</ReactDecorator>
`;
